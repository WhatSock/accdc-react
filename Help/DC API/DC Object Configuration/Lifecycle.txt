Description: Lifecycle events trigger at different stages of a DC object, including construction, rendering, closing, and destruction, and these methods provide advanced functionality by controlling the order in which process handlers are run.

Note: Each property may be set declaratively when creating new DC objects, or directly by modifying individual properties on instantiated DC objects.

Declarative Syntax

{
  EventName1: Function1,
  EventName2: Function2
  // Etc.
}

Direct Syntax

var Value = DC.PropertyName;

DC.EventName = Function;

Lifecycle State Properties

// Reflects when the DC object is in the process of being rendered. True when loading, false otherwise.
  DC.loading

// Reflects when the DC object is completely rendered. True when rendered, false otherwise.
  DC.loaded

// Reflects when the DC object is in the process of being closed. True when closing, false otherwise.
  DC.closing

// Optionally abort the rendering of a DC object when in the process of loading.
// Must be set from within a lifecycle event, such as runBefore or runDuring.
  DC.cancel = true

Lifecycle Events

// Execute when a DC object is instantiated as a live DC object.
  onCreated: function(DC) {   }

// Execute an array of external JS resources before a DC object opens.
// Only runs once.
  runJSOnceBefore: ["URL1.js", "URL2.js"]

// Execute before a DC object opens.
// Only runs once.
  runOnceBefore: function(DC) {   }

// Execute an array of external JS resources before a DC object opens.
// Runs every time.
  runJSBefore: ["URL1.js", "URL2.js"]

// Execute before a DC object opens.
// Runs every time.
// Setting DC.cancel to true will abort rendering.
  runBefore: function(DC) {   }

// Execute during the opening process of a DC object.
// Runs every time.
// Runs after all nodes are created, but just before the DOM rendering processes.
// Setting DC.cancel to true will abort rendering.
  runDuring: function(DC) {   }

// Execute an array of external JS resources after a DC object has opened.
// Only runs once.
  runJSOnceAfter: ["URL1.js", "URL2.js"]

// Execute after a DC object has opened.
// Only runs once.
  runOnceAfter: function(DC) {   }

// Execute an array of external JS resources after a DC object has opened.
// Runs every time.
  runJSAfter: ["URL1.js", "URL2.js"]

// Execute after a DC object has opened.
// Runs every time.
  runAfter: function(DC) {   }

// Execute before a DC object closes.
// Runs every time.
  runBeforeClose: function(DC) {   }

// Execute after a DC object is closed.
// Runs every time.
  runAfterClose: function(DC) {   }

// Exicute before a DC object is destroyed.
// This only occurs when DC.destroy() or $A.destroy() is used to completely destroy a DC object.
  runBeforeDestroy: function(DC) {   }

Special Properties

// Reverse the external JavaScript execution order.
// When true, external JS scripts will run after the associated inline scripts instead of before, as they do by default.
// E.G This means, runJSBefore will exicute after runBefore, instead of the other way around as shown above.
// This reversal will occur for all lifecycle events that include the exicution of external scripts.
  reverseJSOrder: false

// Allow for the cascading of lifecycle events when multiple events of the same type are declared.
// When true, lifecycle events with the same name declared as overrides when instantiating DC objects using $A(), will exicute in succession instead of being overwritten.
// The same is true when setting a globalDC lifecycle method,
// which will exicute in the order: first the individual DC method, followed by the shared method, followed by the globalDC method.
  allowCascade: false
